#!/usr/bin/swipl -f

:- write('% alphabet(a). から alphabet(Z). までを出力する問題 in Prolog.\n\n').

% 一つ前の課題には下記のような一連の述語定義があった。
% 
%   文字(a).
%   文字(a).
%     :
%   (省略)
%     :
%   文字(a).
% 
% Prologを使っていると、上記の定義を自動で生成したくなってくる(らしい)
% 上記ならば手動でコピペにて記述してもよいが、下記の場合はどうだろうか。
% 
%   文字(a).
%   文字(b).
%   文字(c).
%     :
%     (省略)
%     :
%   文字(Z).
%
% 'a' だけであった部分が、 'a', 'c', 'd', と 'Z' まで変化している。
%
% 本課題は、このような文字列を Prolog自身で生成し、
% 出力してしまおうというものだ。


% 述語は '' でくくっても記述できる
'a-Zまでの文字を出力する' :-
  % 出力する文字のリストを記述する
  %
  %   泥臭いが、今回はこの指針で書くというお題
  %   筆者はRubyで生成した :p
  L = [a, b, c, d, e, f, g, h, i, j, k, l, m, 
       n, o, p, q, r, s, t, u, v, w, x, y, z, 
       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 
       'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
       'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
       'Y', 'Z'],
  文字を出力する(L).


% 終了する条件。
%
%   空リストが指定されたら何もしない。
%   「文字を出力する([]) :- true.」に相当。
%
文字を出力する([]).

% 再帰的に文字を出力する。
%
%  +----- L をリストの先頭に束縛する。 例: [a, b, c] の a
%  |      Lisp でいう car。
%  |
% [L|R]
%    |
%    +----- R には リストの残りが入る。 例: [a, b, c] の [b, c]
%           Lisp でいう cdr。
%
文字を出力する([L|R]) :-
  writef('alphabet(%t).\n', [L]),
  文字を出力する(R).

:- 'a-Zまでの文字を出力する'.

:- halt.
