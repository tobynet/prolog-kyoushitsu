#!/usr/bin/swipl -f

:- write('% 単位節要素の加算(集約問題) in Prolog.\n\n').

% Prolog では集約の用途で findall がよく使われるが、
% 内部的には「副作用」があると思われる。
% findall は SQL の select に相当する
%
% 参考: https://ja.wikipedia.org/wiki/Prolog#.E5.89.AF.E4.BD.9C.E7.94.A8.E3.81.AB.E3.81.A4.E3.81.84.E3.81.A6


年齢(山田,35).
年齢(大島,20).
年齢(清川,28).

% :- 年齢(X,Y)

% 下記の最後の時点では、それ以前の年齢は
% すでに参照できない状態になっているため、
% ようするに加算しにくい
%
%   ?- 年齢(X,Y).
%   X = 山田,
%   Y = 35 ;
%   X = 大島,
%   Y = 20 ;
%   X = 清川,
%   Y = 28.

% (動的に?)述語を作るやり方があるが……
% 下記参考サイトにコードがあるが冗長なので、
% Prologプログラマはやらないとのこと
%
% 参考. https://ja.wikipedia.org/wiki/Prolog#.E5.89.AF.E4.BD.9C.E7.94.A8.E3.81.AB.E3.81.A4.E3.81.84.E3.81.A6
%
% 動作イメージ:
%
%   一時合計(0).
%   一時合計(35).
%   S = 35 + 26.
%   一時合計(55).
%   ..
%   ?- 一時合計(S).


% 代わりに findall を使うとよい
% ただし、内部的には、上記のような「副作用」のあるコードになっているとみていい模様

年齢合計(_年齢合計) :-
    findall(_年齢, 年齢(_,_年齢), List),
    add(List, _年齢合計).

add([],0).
add([_年齢|R],_年齢合計) :-
    add(R, _年齢合計2),
    _年齢合計 is _年齢合計2 + _年齢.

:- 年齢合計(_年齢合計), write(_年齢合計), write('\n').

:- halt.

